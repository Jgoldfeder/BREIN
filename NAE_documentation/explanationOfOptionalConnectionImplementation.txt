what are threshhold rules?




lets say we have an input A, and A is optional

when all said and done, in all functions at the most local level, A will be part of a disjunction or conjunction, because of demorgan's law. Thus:

t\To make A optional, have a boolean variable AisConnected that is initialized to either true or false, and in all subsequent states keeps the same value

in case of conjuntion:

X & A

replace with:
X & (A | !AisConnected)
Thus: 
If A is connected, A | false becomes A, and it reduces back to X & A.
If A is not connected, A | true reduces to true. We then get X & true, which is X. Thus A has been eliminated from the expression.


in case of disjuntion:

X | A

replace with:
X | (A & AisConnected)
Thus: 
If A is connected, A & true becomes A, and it reduces back to X | A.
If A is not connected, A & false reduces to false. We then get X | false, which is X. Thus A has been eliminated from the expression.


All this leaves an issue:
What if the optional connector is theoreitcally in a block of cunjunction or disjunction, but it is the only of its kind, i.e. it is the only activator/repressor. Then, we have an issue.
For example, supppose we have a single optional activator A and a single repressor B, and the function called for takes the conjunction of all activators, the conjunction of all repressors, and the disjunction of those two, like so:
(a1&a2&...&an) | (r1&r2&...&rn)

We would write our function as follows. Since the sole activator is technically patr of a conjunction, it would be written:
(A | !AisConnected)
Thus the total function would be:
(A | !AisConnected) | B
When A is not connected, instead of disappearing as we wished, we get:
TRUE.
A similar issue comes had the actuvators been in disjunction with each other, as would be the repressors, and the two where joined by a cinjunction. The transition function would be:
  (A & AisConnected) & B
When A is not connected, instead of being B, this evaluates to:
FALSE.

This must be fixed. Also make sure B is indeed the result we want. 

also problem if there are two activators or repressors, but both are optional


Proposed solution:
use DeMorgan's law to convert all conjunctions to disjunctions.
Thus (A&B&C&D) becomes !!(A&B&C&D) becomes !(!A | !B | !C | !D)
To toggle A based on its connection:
 !(  (!A & A_isConnected)  | !B | !C | !D):


didn't work due to negations ruining the parity of operators

instead branch away just the sungleton case
this worked!









